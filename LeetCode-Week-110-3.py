import sys

class Solution:
    def minAreaRect(self, points):
        """
        :type points: List[List[int]]
        :rtype: int
        """
        minimum_area = sys.maxsize
        for i in range(len(points)-3):
            for j in range(i+1, len(points)-2):
                for k in range(j+1, len(points)-1):
                    for l in range(k+1, len(points)):
                        new_points = sorted([points[i], points[j], points[k], points[l]], key=lambda point: (point[0], point[1]))
                        height = new_points[2][0]-new_points[0][0]
                        width = new_points[1][1] - new_points[0][1]
                        if height > 0 and width > 0 and \
                            new_points[1][1] == new_points[3][1] and new_points[0][1] == new_points[2][1] and \
                            new_points[0][0] == new_points[1][0] and new_points[2][0] == new_points[3][0]:
                            minimum_area = min(minimum_area, height*width)
        
        if minimum_area == sys.maxsize:
            return 0
        else:
            return minimum_area
                        

        
   
solution = Solution()
print(solution.minAreaRect([[1,1],[1,3],[3,1],[3,3],[2,2]])==4)
print(solution.minAreaRect([[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]) == 2)
print(solution.minAreaRect([[0,1],[3,2],[4,4],[0,2],[4,3],[2,4],[4,2],[1,1]]) == 0)
print(solution.minAreaRect([[36219,4673],[26311,36047],[26311,4673],[36219,16024],[17010,16024],[26311,6287],[22367,6287],[17010,36047],[17010,6287],[22367,16024],[36219,6287],[22367,4673],[17010,4673],[36219,36047]]) == 6365616)
print(solution.minAreaRect([[26030,39519],[8964,34856],[26030,34856],[13012,39519],[30289,39519],[13012,21894],[13012,34856],[30289,21894],[30289,48],[8964,48],[8964,39519]]) == 18875824)
print(solution.minAreaRect([[16793,24298],[24122,35227],[32714,24298],[29233,4158],[862,7785],[31782,17366],[9191,29976],[24122,21801],[31782,4158],[32714,37583],[32714,29976],[31782,19170],[39814,29976],[862,4158],[34816,7785],[17327,29976],[16793,7785],[32714,21801],[32714,24895],[29233,19170],[17327,17366],[2226,4158],[9191,35227],[16793,4158],[31782,24298],[31782,24895],[34816,19170],[24122,24895],[862,24298],[862,24895],[2226,7785],[17327,21801],[862,17366],[34816,4158],[31782,21801],[862,19170],[2226,21801],[17327,35227],[29233,24298],[39814,24895],[862,21801],[39814,24298],[2226,35227],[39814,7785],[24122,7785],[2226,24895],[29233,29976],[9191,24895],[34816,24895],[34816,21801],[24122,19170],[32714,7785],[2226,24298],[29233,24895],[2226,17366],[34816,37583],[16793,24895],[17327,4158],[16793,37583],[24122,4158],[9191,24298],[39814,17366],[39814,35227],[29233,35227],[39814,37583],[862,29976],[29233,37583]])==556404)
